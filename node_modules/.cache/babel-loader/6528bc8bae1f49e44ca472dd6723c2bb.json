{"ast":null,"code":"import _classCallCheck from \"/Users/anny/Desktop/clicky-game/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/anny/Desktop/clicky-game/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/anny/Desktop/clicky-game/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/anny/Desktop/clicky-game/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/anny/Desktop/clicky-game/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/anny/Desktop/clicky-game/src/components/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport AppNavbar from './AppNavbar';\nimport { images as clickyImages } from \"./ClickyItemContainer/ItemSrc\";\nimport Game from './ClickyItemContainer'; //\n// Main game app component\n//\n// * state\n//     items: [{ image: <sourc image>, isClicked: <true/false> }, ...]\n//     indices: <shuffled array indices for the items>\n//     score: <current game score>\n//     topScore: <the highest game score>\n//     msg: <status message to display> \n//\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      items: _this.initItems(clickyImages),\n      indices: shuffle(clickyImages.length),\n      score: 0,\n      topScore: 0,\n      msg: 'Click on an image without clicking the same one twice!'\n    };\n    return _this;\n  } //\n  // Initialized array of clickable objects\n  //\n\n\n  _createClass(App, [{\n    key: \"initItems\",\n    value: function initItems(srcImages) {\n      return srcImages.map(function (img) {\n        return {\n          image: img,\n          isClicked: false\n        };\n      });\n    } //\n    // Handle an item click event\n    //\n\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(i) {\n      var items = this.state.items.slice();\n      var topScore = this.state.topScore * 1;\n      var msg = []; // Reset if the same item is clicked\n\n      if (items[i].isClicked) {\n        items = this.initItems(clickyImages);\n\n        if (this.state.score > topScore) {\n          topScore = this.state.score * 1;\n          msg.push(\" Highest score!\");\n        }\n\n        msg.unshift(\"You guessed incorrectly...\");\n        this.setState({\n          items: items,\n          indices: shuffle(items.length),\n          score: 0,\n          topScore: topScore,\n          msg: msg\n        });\n        return;\n      } // update the items[i], shuffle, and increment the score\n\n\n      items[i].isClicked = true;\n      var score = this.state.score + 1;\n\n      if (items.every(function (item) {\n        return item.isClicked;\n      })) {\n        msg.push(\"PERFECT!!! You guessed all correctly\");\n        items = this.initItems(clickyImages);\n        topScore = score;\n        score = 0;\n      } else {\n        msg.push(\"You guessed correctly\");\n      }\n\n      this.setState({\n        items: items,\n        indices: shuffle(items.length),\n        score: score,\n        topScore: topScore,\n        msg: msg\n      });\n    } //\n    // Render the component\n    // \n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(AppNavbar, {\n        score: this.state.score,\n        topScore: this.state.topScore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      })), React.createElement(\"h4\", {\n        class: \"msg-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, this.state.msg), React.createElement(Game, {\n        items: this.state.items,\n        indices: this.state.indices,\n        onClick: function onClick(i) {\n          return _this2.handleClick(i);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component); //\n// Shuffled array indices\n//\n// PARAMS:\n// * arrSize: size of an existing array\n//\n// RETURN:\n// * randomized array indices for the existing array\n// \n\n\nfunction shuffle(arrSize) {\n  var iniArray = [];\n  var resArray = [];\n\n  for (var i = 0; i < arrSize; i++) {\n    iniArray.push(i);\n  }\n\n  for (var _i = 0; _i < arrSize; _i++) {\n    var ndx = Math.floor(Math.random() * (arrSize - _i));\n    resArray[_i] = iniArray.splice(ndx, 1)[0];\n  }\n\n  return resArray;\n} // Export the App\n\n\nexport default App;","map":{"version":3,"sources":["/Users/anny/Desktop/clicky-game/src/components/App.js"],"names":["React","Component","AppNavbar","images","clickyImages","Game","App","props","state","items","initItems","indices","shuffle","length","score","topScore","msg","srcImages","map","img","image","isClicked","i","slice","push","unshift","setState","every","item","handleClick","arrSize","iniArray","resArray","ndx","Math","floor","random","splice"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport AppNavbar from './AppNavbar';\nimport { images as clickyImages } from \"./ClickyItemContainer/ItemSrc\";\nimport Game from './ClickyItemContainer';\n\n//\n// Main game app component\n//\n// * state\n//     items: [{ image: <sourc image>, isClicked: <true/false> }, ...]\n//     indices: <shuffled array indices for the items>\n//     score: <current game score>\n//     topScore: <the highest game score>\n//     msg: <status message to display> \n//\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: this.initItems(clickyImages),\n      indices: shuffle(clickyImages.length),\n      score: 0,\n      topScore: 0,\n      msg: 'Click on an image without clicking the same one twice!'\n    };\n  }\n \n  //\n  // Initialized array of clickable objects\n  //\n  initItems(srcImages) {\n    return srcImages.map((img) => {\n      return {\n        image: img,\n        isClicked: false,\n      }\n    });\n  }\n  \n  //\n  // Handle an item click event\n  //\n  handleClick(i) {\n    let items = this.state.items.slice();\n    let topScore = this.state.topScore * 1;\n    let msg = [];\n\n    // Reset if the same item is clicked\n    if (items[i].isClicked) {\n      items = this.initItems(clickyImages);\n      \n      if (this.state.score > topScore) {\n        topScore = this.state.score * 1;\n        msg.push(\" Highest score!\");\n      }\n      \n      msg.unshift(\"You guessed incorrectly...\");\n      this.setState({\n        items: items,\n        indices: shuffle(items.length),\n        score: 0,\n        topScore: topScore, \n        msg: msg\n      });\n      \n      return;\n    }\n     \n    // update the items[i], shuffle, and increment the score\n    items[i].isClicked = true;\n    let score = this.state.score + 1;\n    \n    if (items.every(item => item.isClicked)) {\n      msg.push(\"PERFECT!!! You guessed all correctly\");\n      items = this.initItems(clickyImages);\n      topScore = score;\n      score = 0;\n    } else {\n      msg.push(\"You guessed correctly\");\n    }\n    \n    this.setState({\n      items: items,\n      indices: shuffle(items.length),\n      score: score,\n      topScore: topScore,\n      msg: msg\n    });\n  }\n  \n  //\n  // Render the component\n  // \n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <AppNavbar\n            score={this.state.score}\n            topScore={this.state.topScore}\n          />\n        </header>\n\n        <h4 class=\"msg-text\">\n          {this.state.msg}\n        </h4>\n        \n        <Game \n          items={this.state.items}\n          indices={this.state.indices}\n          onClick={i => this.handleClick(i)}\n        />\n      </div>\n    );\n  }\n}\n\n//\n// Shuffled array indices\n//\n// PARAMS:\n// * arrSize: size of an existing array\n//\n// RETURN:\n// * randomized array indices for the existing array\n// \nfunction shuffle(arrSize) {\n  let iniArray = [];\n  let resArray = [];\n  \n  for (let i = 0; i < arrSize; i++) {\n    iniArray.push(i);\n  }\n  \n  for (let i = 0; i < arrSize; i++)  {\n    const ndx = Math.floor(Math.random() * (arrSize - i));\n    resArray[i] = iniArray.splice(ndx, 1)[0];\n  }\n  \n  return resArray;\n}\n\n// Export the App\nexport default App;\n"]},"metadata":{},"sourceType":"module"}